{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Button, Card, Icon, Image, Grid, Input, Segment, Form } from 'semantic-ui-react';\nimport ImageModal from '../Modal/MyModal.jsx';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { loadAvatar, errorLoading } from '../../store/reducers/users/index';\nimport { avatarModalStateOn } from '../../store/reducers/ui/index';\n\nclass ImageUploader extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fileInputRef\", React.createRef());\n\n    _defineProperty(this, \"fileChange\", e => {\n      this.uploadImage(e, \"multer\");\n    });\n\n    this.state = {\n      userAvatar: this.props.userAvatar\n    };\n    this.uploadImage = this.uploadImage.bind(this);\n  }\n\n  setDefaultImage() {\n    var defaultImage = '../../static/profile-avatars/assets/default-img.jpg';\n    this.loadAvatarImage(defaultImage);\n  }\n\n  loadAvatarImage(img) {\n    var {\n      loadAvatar\n    } = this.props;\n    loadAvatar(img);\n  }\n\n  uploadImage(e, method) {\n    e.stopPropagation();\n    const {\n      avatarModalStateOn,\n      errorLoading\n    } = this.props;\n\n    if (method === \"multer\") {\n      let imageFormObj = new FormData();\n      imageFormObj.append(\"imageName\", \"multer-image-\" + Date.now());\n      imageFormObj.append(\"imageData\", e.target.files[0]);\n      this.loadAvatarImage(window.URL.createObjectURL(e.target.files[0]));\n      var config = {\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      };\n      axios.post(`http://localhost:8016/images/uploadmulter`, imageFormObj, config).then(data => {\n        if (data.data.success) {\n          console.log(\"data \", data);\n          avatarModalStateOn();\n        }\n      }).catch(err => {\n        if (err.response.status === 500) {\n          console.log(err.response.status);\n          avatarModalStateOn();\n          this.setDefaultImage();\n          errorLoading();\n        }\n      });\n    }\n  }\n\n  render() {\n    var {\n      userAvatar,\n      avatarModalActive,\n      error\n    } = this.props;\n    console.log(\"avatarModalActive \", avatarModalActive);\n    var ImageLoaded;\n\n    if (avatarModalActive) {\n      ImageLoaded = __jsx(ImageModal, {\n        key: \"AlertModal\",\n        isAlertModal: avatarModalActive,\n        affirmativeUsed: \"OK!\",\n        message: \"Your image has been uploaded succesfully\"\n      });\n    } else if (avatarModalActive && error) {\n      ImageLoaded = __jsx(ImageModal, {\n        key: \"AlertModal\",\n        isAlertModal: avatarModalActive,\n        affirmativeUsed: \"OK!\",\n        message: \"There was an error uploading your image, file size was to big!\"\n      });\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Segment, null, __jsx(Card, {\n      fluid: true\n    }, __jsx(Image, {\n      wrapped: true,\n      ui: false,\n      src: userAvatar || this.setDefaultImage(),\n      alt: \"upload-image\"\n    }), __jsx(Segment, null, __jsx(Form, {\n      encType: \"multipart/form-data\"\n    }, __jsx(Form.Field, null, __jsx(Button, {\n      content: \"Edit your Avatar!\",\n      labelPosition: \"left\",\n      icon: \"file\",\n      onClick: () => this.fileInputRef.current.click()\n    }), __jsx(\"input\", {\n      ref: this.fileInputRef,\n      type: \"file\",\n      name: \"avatar\",\n      hidden: true,\n      onChange: this.fileChange\n    })))), __jsx(Card.Content, null, __jsx(Card.Header, null, \"Charly\"), __jsx(Card.Meta, null, __jsx(\"span\", {\n      className: \"date\"\n    }, \"Joined in 2015\")), __jsx(Card.Description, null, \"Charly\")), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(\"a\", null, __jsx(Icon, {\n      name: \"user\"\n    }), \"22 Friends\")))), ImageLoaded);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const {\n    ui,\n    users\n  } = state;\n  const {\n    userAvatar,\n    error\n  } = users;\n  const {\n    avatarModalActive\n  } = ui;\n  return {\n    userAvatar,\n    avatarModalActive,\n    error\n  };\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  loadAvatar,\n  errorLoading,\n  avatarModalStateOn\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageUploader);","map":{"version":3,"sources":["/Users/antonio-pavicevac-ortiz/Dropbox/developer_folder/hillfinder/components/ImageUploader/ImageUploader.jsx"],"names":["React","PureComponent","Button","Card","Icon","Image","Grid","Input","Segment","Form","ImageModal","axios","connect","bindActionCreators","loadAvatar","errorLoading","avatarModalStateOn","ImageUploader","constructor","props","createRef","e","uploadImage","state","userAvatar","bind","setDefaultImage","defaultImage","loadAvatarImage","img","method","stopPropagation","imageFormObj","FormData","append","Date","now","target","files","window","URL","createObjectURL","config","headers","post","then","data","success","console","log","catch","err","response","status","render","avatarModalActive","error","ImageLoaded","fileInputRef","current","click","fileChange","mapStateToProps","ui","users","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { Button, Card, Icon, Image, Grid, Input, Segment, Form } from 'semantic-ui-react'\n\nimport ImageModal from '../Modal/MyModal.jsx'\nimport axios from 'axios';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { loadAvatar, errorLoading } from '../../store/reducers/users/index'\nimport { avatarModalStateOn } from '../../store/reducers/ui/index'\n\nclass ImageUploader extends PureComponent {\n constructor(props) {\n  super(props);\n\n  this.state = {\n   userAvatar : this.props.userAvatar\n  }\n\n  this.uploadImage = this.uploadImage.bind(this);\n }\n\n fileInputRef = React.createRef();\n\n\n setDefaultImage() {\n  var defaultImage = '../../static/profile-avatars/assets/default-img.jpg';\n  this.loadAvatarImage(defaultImage)\n }\n\n loadAvatarImage(img) {\n  var { loadAvatar } = this.props;\n  loadAvatar(img)\n }\n\n fileChange = (e) => {\n  this.uploadImage(e, \"multer\");\n }\n\n uploadImage(e, method) {\n  e.stopPropagation();\n\n  const { avatarModalStateOn, errorLoading } = this.props\n\n  if (method === \"multer\") {\n\n   let imageFormObj = new FormData();\n\n   imageFormObj.append(\"imageName\", \"multer-image-\" + Date.now());\n   imageFormObj.append(\"imageData\", e.target.files[0]);\n\n   this.loadAvatarImage(window.URL.createObjectURL(e.target.files[0]))\n\n   var config = { headers: { 'content-type': 'multipart/form-data' } }\n   axios.post(`http://localhost:8016/images/uploadmulter`, imageFormObj, config)\n    .then((data) => {\n     if (data.data.success) {\n      console.log(\"data \", data);\n      avatarModalStateOn();\n     }\n    })\n    .catch((err) => {\n     if (err.response.status === 500) {\n      console.log(err.response.status);\n      avatarModalStateOn();\n      this.setDefaultImage()\n      errorLoading();\n     }\n    });\n  }\n }\n\n render() {\n\n  var { userAvatar, avatarModalActive, error } = this.props;\n\n  console.log(\"avatarModalActive \", avatarModalActive);\n\n  var ImageLoaded;\n    if (avatarModalActive) {\n      ImageLoaded = <ImageModal\n        key=\"AlertModal\"\n        isAlertModal={avatarModalActive}\n        affirmativeUsed=\"OK!\"\n        message=\"Your image has been uploaded succesfully\"\n     />\n    } else if (avatarModalActive && error){\n     ImageLoaded =  <ImageModal\n      key=\"AlertModal\"\n      isAlertModal={avatarModalActive}\n      affirmativeUsed=\"OK!\"\n      message=\"There was an error uploading your image, file size was to big!\"\n     />\n    }\n\n  return <>\n      <Segment>\n        <Card fluid>\n         <Image wrapped ui={false} src={userAvatar || this.setDefaultImage()} alt=\"upload-image\" />\n          <Segment>\n           <Form encType=\"multipart/form-data\">\n            <Form.Field>\n             <Button\n              content=\"Edit your Avatar!\"\n              labelPosition=\"left\"\n              icon=\"file\"\n              onClick={() => this.fileInputRef.current.click()}\n             />\n             <input\n              ref={this.fileInputRef}\n              type=\"file\"\n              name=\"avatar\"\n              hidden\n              onChange={this.fileChange}\n             />\n            </Form.Field>\n           </Form>\n          </Segment>\n          <Card.Content>\n\n           <Card.Header>Charly</Card.Header>\n           <Card.Meta>\n            <span className='date'>Joined in 2015</span>\n           </Card.Meta>\n           <Card.Description>\n            Charly\n           </Card.Description>\n           </Card.Content>\n           <Card.Content extra>\n           <a>\n            <Icon name='user' />\n            22 Friends\n           </a>\n          </Card.Content>\n       </Card>\n     </Segment>\n   {ImageLoaded}\n\n  </>;\n }\n}\n\nfunction mapStateToProps(state) {\n const { ui, users } = state\n const { userAvatar, error } = users\n const { avatarModalActive } = ui\n\n return { userAvatar, avatarModalActive, error }\n}\n\nconst mapDispatchToProps = dispatch =>\n bindActionCreators({ loadAvatar, errorLoading, avatarModalStateOn }, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageUploader)\n"]},"metadata":{},"sourceType":"module"}