{"ast":null,"code":"import { Responsive } from 'semantic-ui-react';\nimport { sanitize } from 'indicative/sanitizer';\nimport { extend, validate, validateAll } from 'indicative/validator';\nimport { validations } from 'indicative/validator';\nexport function getWidthFactory(isMobileFromSSR) {\n  return function () {\n    var isSSR = true;\n    var ssrValue = isMobileFromSSR ? Responsive.onlyMobile.maxWidth : Responsive.onlyTablet.minWidth;\n    return isSSR ? ssrValue : window.innerWidth;\n  };\n}\nexport function validateInputs(formType, username, setUsernameError, setUsernameFeedback, password, password_confirmation, setPasswordConfirmationError, setPasswordConfirmationFeedback, setPasswordError, setPasswordFeedback, setDisableButton) {\n  function getFormValidation(formType) {\n    function isLoginOrRegistration() {\n      var data = {\n        username: username,\n        password: password\n      };\n      var schema = {\n        username: 'email',\n        // username: [\n        //   validations.regex([\n        //     new RegExp(\n        //       '/^(([^<>()[]\\\\.,;:s@\"]+(.[^<>()[]\\\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/'\n        //     )\n        //   ])\n        // ],\n        password: 'min:7|max:11'\n      };\n      var messages = {\n        email: 'Make sure this is a valid email!!',\n        // regex: 'Make sure this is a valid email!!',\n        min: 'The value is too short',\n        max: 'The value is too long'\n      }; // sanitize(data, sanitizeSchema);\n\n      validateAll(data, schema, messages).then(success => {\n        if (success.username) {\n          console.log('success.username ', success.username);\n          setUsernameError(false);\n        }\n\n        if (success.password) {\n          console.log('success.password ', success.password);\n          setPasswordError(false);\n        }\n\n        if (success.username && success.password) {\n          console.log('success.username ', success.username);\n          setDisableButton(false);\n        }\n      }).catch(errors => {\n        console.log('errors ', errors);\n\n        if (errors[0].field === 'username') {\n          setUsernameError(true);\n          setDisableButton(true);\n          setUsernameFeedback(errors[0].message);\n        }\n\n        if (errors[0].field === 'password') {\n          setPasswordError(true);\n          setDisableButton(true);\n          setPasswordFeedback(errors[0].message);\n        }\n      });\n    }\n\n    function isConfirmation() {\n      validate(data, schema, messages).then(success => {\n        console.log('success ', success);\n\n        if (success.password === success.password_confirmation) {\n          setDisableButton(false), setFormSuccess(true), setFormError(false), setPasswordError(false), setPassword_confirmationError(false);\n        }\n      }).catch(errors => {\n        console.log('errors ', errors);\n\n        if (errors[0].field === 'password') {\n          setPasswordError(true);\n          setPasswordFeedBack(errors[0].message);\n          setDisableButton(true);\n          setFormSuccess(false);\n          setFormError(true);\n        }\n\n        if (errors[0].field !== 'password') {\n          setPasswordError(false);\n          setPasswordFeedBack('');\n        }\n\n        if (errors[0].field === 'password_confirmation') {\n          setPasswordConfirmationError(false);\n          setPasswordConfirmationFeedback(errors[0].message);\n          setDisableButton(true);\n          setFormSuccess(false);\n          setFormError(true);\n        }\n\n        if (errors[0].field !== 'password_confirmation') {\n          setPasswordConfirmationError(false);\n          setPasswordConfirmationFeedback('');\n        }\n      });\n    }\n\n    function isForgotPassword() {\n      var data = {\n        username: username\n      };\n      var sanitizeSchema = {\n        username: 'normalize_email'\n      };\n      var schema = {\n        username: 'email'\n      };\n      var messages = {\n        required: 'Make sure to enter the field value',\n        email: 'Enter valid email address'\n      };\n      validate(data, schema, messages).then(success => {\n        if (success.username) {\n          console.log('success.username ', success.username);\n          setUsernameError(false);\n          setDisableButton(false);\n        }\n      }).catch(errors => {\n        console.log('errors ', errors);\n\n        if (errors[0].validation === 'email') {\n          const {\n            message\n          } = errors[0];\n          setUsernameError(true);\n          setDisableButton(true);\n          setUsernameFeedback(message);\n        }\n      });\n    }\n\n    function isUpdatePassword() {\n      var data = {\n        password: password,\n        password_confirmation: password_confirmation\n      };\n      var schema = {\n        password: 'min:4|max:11|string',\n        password_confirmation: 'required|min:4|max:11|string|same:password'\n      };\n      var messages = {\n        required: 'Make sure to enter the field value',\n        min: 'Password is too short.',\n        max: 'Password is too long.',\n        same: 'Password must match.'\n      }; // extend('username', {\n      //   async: true\n      // });\n\n      validate(data, schema, messages).then(success => {\n        console.log('success ', success); // if (success.password) {\n        //   setPasswordError(false);\n        //   // if (success.password_confirmation) {\n        //   //   setPasswordConfirmationError(false);\n        //   // }\n        //   if (success.password === success.password_confirmation) {\n        //     console.log('success.username ', success.username);\n        //     setPasswordConfirmationError(false);\n        //     setDisableButton(false);\n        //     setPasswordConfirmationError(false);\n        //   }\n        // }\n      }).catch(errors => {\n        console.log('errors ', errors);\n\n        if (errors[0].field === 'password') {\n          setPasswordError(true);\n          setPasswordFeedback(errors[0].message);\n          setDisableButton(true);\n        }\n\n        if (errors[0].field === 'password_confirmation') {\n          setPasswordConfirmationError(true);\n          setPasswordConfirmationFeedback(errors[0].message);\n          setDisableButton(true);\n        }\n      });\n    }\n\n    var Forms = {\n      Login: isLoginOrRegistration,\n      Registration: isLoginOrRegistration,\n      ForgotPassword: isForgotPassword,\n      UpdatePassword: isUpdatePassword\n    };\n\n    try {\n      //  setFormError(false);\n      Forms[formType]();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return getFormValidation(formType);\n}","map":{"version":3,"sources":["/Users/antonio-pavicevac-ortiz/Dropbox/developer_folder/hillfinder/utils/index.js"],"names":["Responsive","sanitize","extend","validate","validateAll","validations","getWidthFactory","isMobileFromSSR","isSSR","ssrValue","onlyMobile","maxWidth","onlyTablet","minWidth","window","innerWidth","validateInputs","formType","username","setUsernameError","setUsernameFeedback","password","password_confirmation","setPasswordConfirmationError","setPasswordConfirmationFeedback","setPasswordError","setPasswordFeedback","setDisableButton","getFormValidation","isLoginOrRegistration","data","schema","messages","email","min","max","then","success","console","log","catch","errors","field","message","isConfirmation","setFormSuccess","setFormError","setPassword_confirmationError","setPasswordFeedBack","isForgotPassword","sanitizeSchema","required","validation","isUpdatePassword","same","Forms","Login","Registration","ForgotPassword","UpdatePassword","error"],"mappings":"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","sourcesContent":["import { Responsive } from 'semantic-ui-react';\nimport { sanitize } from 'indicative/sanitizer';\n\nimport { extend, validate, validateAll } from 'indicative/validator';\nimport { validations } from 'indicative/validator';\n\nexport function getWidthFactory(isMobileFromSSR) {\n  return function() {\n    var isSSR = typeof window === 'undefined';\n    var ssrValue = isMobileFromSSR\n      ? Responsive.onlyMobile.maxWidth\n      : Responsive.onlyTablet.minWidth;\n    return isSSR ? ssrValue : window.innerWidth;\n  };\n}\n\nexport function validateInputs(\n  formType,\n  username,\n  setUsernameError,\n  setUsernameFeedback,\n  password,\n  password_confirmation,\n  setPasswordConfirmationError,\n  setPasswordConfirmationFeedback,\n  setPasswordError,\n  setPasswordFeedback,\n  setDisableButton\n) {\n  function getFormValidation(formType) {\n    function isLoginOrRegistration() {\n      var data = {\n        username: username,\n        password: password\n      };\n\n      var schema = {\n        username: 'email',\n        // username: [\n        //   validations.regex([\n        //     new RegExp(\n        //       '/^(([^<>()[]\\\\.,;:s@\"]+(.[^<>()[]\\\\.,;:s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/'\n        //     )\n        //   ])\n        // ],\n        password: 'min:7|max:11'\n      };\n      var messages = {\n        email: 'Make sure this is a valid email!!',\n        // regex: 'Make sure this is a valid email!!',\n        min: 'The value is too short',\n        max: 'The value is too long'\n      };\n\n      // sanitize(data, sanitizeSchema);\n\n      validateAll(data, schema, messages)\n        .then(success => {\n          if (success.username) {\n            console.log('success.username ', success.username);\n            setUsernameError(false);\n          }\n\n          if (success.password) {\n            console.log('success.password ', success.password);\n            setPasswordError(false);\n          }\n          if (success.username && success.password) {\n            console.log('success.username ', success.username);\n            setDisableButton(false);\n          }\n        })\n        .catch(errors => {\n          console.log('errors ', errors);\n          if (errors[0].field === 'username') {\n            setUsernameError(true);\n            setDisableButton(true);\n            setUsernameFeedback(errors[0].message);\n          }\n\n          if (errors[0].field === 'password') {\n            setPasswordError(true);\n            setDisableButton(true);\n            setPasswordFeedback(errors[0].message);\n          }\n        });\n    }\n    function isConfirmation() {\n      validate(data, schema, messages)\n        .then(success => {\n          console.log('success ', success);\n          if (success.password === success.password_confirmation) {\n            setDisableButton(false),\n              setFormSuccess(true),\n              setFormError(false),\n              setPasswordError(false),\n              setPassword_confirmationError(false);\n          }\n        })\n        .catch(errors => {\n          console.log('errors ', errors);\n          if (errors[0].field === 'password') {\n            setPasswordError(true);\n            setPasswordFeedBack(errors[0].message);\n            setDisableButton(true);\n            setFormSuccess(false);\n            setFormError(true);\n          }\n\n          if (errors[0].field !== 'password') {\n            setPasswordError(false);\n            setPasswordFeedBack('');\n          }\n\n          if (errors[0].field === 'password_confirmation') {\n            setPasswordConfirmationError(false);\n            setPasswordConfirmationFeedback(errors[0].message);\n            setDisableButton(true);\n            setFormSuccess(false);\n            setFormError(true);\n          }\n\n          if (errors[0].field !== 'password_confirmation') {\n            setPasswordConfirmationError(false);\n            setPasswordConfirmationFeedback('');\n          }\n        });\n    }\n\n    function isForgotPassword() {\n      var data = {\n        username: username\n      };\n      var sanitizeSchema = {\n        username: 'normalize_email'\n      };\n      var schema = {\n        username: 'email'\n      };\n      var messages = {\n        required: 'Make sure to enter the field value',\n        email: 'Enter valid email address'\n      };\n      validate(data, schema, messages)\n        .then(success => {\n          if (success.username) {\n            console.log('success.username ', success.username);\n            setUsernameError(false);\n            setDisableButton(false);\n          }\n        })\n        .catch(errors => {\n          console.log('errors ', errors);\n          if (errors[0].validation === 'email') {\n            const { message } = errors[0];\n            setUsernameError(true);\n            setDisableButton(true);\n            setUsernameFeedback(message);\n          }\n        });\n    }\n\n    function isUpdatePassword() {\n      var data = {\n        password: password,\n        password_confirmation: password_confirmation\n      };\n      var schema = {\n        password: 'min:4|max:11|string',\n        password_confirmation: 'required|min:4|max:11|string|same:password'\n      };\n      var messages = {\n        required: 'Make sure to enter the field value',\n        min: 'Password is too short.',\n        max: 'Password is too long.',\n        same: 'Password must match.'\n      };\n      // extend('username', {\n      //   async: true\n      // });\n\n      validate(data, schema, messages)\n        .then(success => {\n          console.log('success ', success);\n          // if (success.password) {\n          //   setPasswordError(false);\n          //   // if (success.password_confirmation) {\n          //   //   setPasswordConfirmationError(false);\n          //   // }\n\n          //   if (success.password === success.password_confirmation) {\n          //     console.log('success.username ', success.username);\n          //     setPasswordConfirmationError(false);\n          //     setDisableButton(false);\n          //     setPasswordConfirmationError(false);\n          //   }\n          // }\n        })\n        .catch(errors => {\n          console.log('errors ', errors);\n          if (errors[0].field === 'password') {\n            setPasswordError(true);\n            setPasswordFeedback(errors[0].message);\n            setDisableButton(true);\n          }\n\n          if (errors[0].field === 'password_confirmation') {\n            setPasswordConfirmationError(true);\n            setPasswordConfirmationFeedback(errors[0].message);\n            setDisableButton(true);\n          }\n        });\n    }\n\n    var Forms = {\n      Login: isLoginOrRegistration,\n      Registration: isLoginOrRegistration,\n      ForgotPassword: isForgotPassword,\n      UpdatePassword: isUpdatePassword\n    };\n\n    try {\n      //  setFormError(false);\n      Forms[formType]();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return getFormValidation(formType);\n}\n"]},"metadata":{},"sourceType":"module"}